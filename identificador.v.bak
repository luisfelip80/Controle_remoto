module Remoto(clk,entrada,led,comando);

parameter IDLE               = 2'b00;   
parameter GUIDANCE           = 2'b01;    
parameter DATAREAD           = 2'b10;  

parameter IDLE_HIGH_DUR      =  262143; 
parameter GUIDE_LOW_DUR      =  230000;  
parameter GUIDE_HIGH_DUR     =  210000;  
parameter DATA_HIGH_DUR      =  41500;
parameter BIT_AVAILABLE_DUR  =  20000;

input         clk;      
input         entrada;    
output reg led;
output reg [7:0] comando;
reg [31:0]delay_on;
reg conta_on,on;
reg    [31:0] oDATA;              
reg    [17:0] idle_count;            
reg           idle_count_flag;      

reg    [17:0] state_count;           
reg           state_count_flag;    
reg    [17:0] data_count;           
reg           data_count_flag;     
reg     [5:0] bitcount;              
reg     [1:0] state;             
reg    [31:0] data;                
reg    [31:0] data_buf;           
reg           data_ready;          
initial begin
	on = 0;
	led =0;
	conta_on = 0;
end
always @(posedge clk) begin
	if (conta_on) begin
		delay_on = delay_on + 1'b1;
	end
	else begin
		delay_on <=0;
	end
end
always @(posedge clk) begin
	if (comando == 8'b00010010 && delay_on == 0) begin
		on <= ~on;
		conta_on<=1;
		led=1;
	end
	else if(delay_on > 20000) begin
		conta_on <=0;
	end
end




always @(posedge clk )
if ((state == IDLE) && !entrada)
			 idle_count <= idle_count + 1'b1;
		else                           
			 idle_count <= 0;	              		 	

always @(posedge clk)	
if ((state == GUIDANCE) && entrada)
			 state_count <= state_count + 1'b1;
		else  
			 state_count <= 0;	            		 	

always @(posedge clk )
if ((state == DATAREAD) && entrada)
			 data_count <= data_count + 1'b1;
		else
			 data_count <= 1'b0;        

always @(posedge clk)
if (state == DATAREAD)
		begin
			if (data_count == 20000)
					bitcount <= bitcount + 1'b1; 
		end   
	  else
	     bitcount <= 6'b0;

always @(posedge clk) 
			case (state)
 			    IDLE     : if (idle_count > GUIDE_LOW_DUR)  
			  	              state <= GUIDANCE; 
			    GUIDANCE : if (state_count > GUIDE_HIGH_DUR)
			  	              state <= DATAREAD;
			    DATAREAD : if ((data_count >= IDLE_HIGH_DUR) || (bitcount >= 33))
			  					      state <= IDLE;
	        default  : state <= IDLE; 
			 endcase

always @(posedge clk)
	  if (state == DATAREAD)
		begin
			 if (data_count >= DATA_HIGH_DUR) 
			    data[bitcount-1'b1] <= 1'b1;  
		end
		else
			 data <= 0;
	
always @(posedge clk) 
	  if (bitcount == 32)   
		begin
			 if (data[31:24] == ~data[23:16])
			 begin		
					comando[7:0] <= data[23:16]; 
					data_buf <= data;
				  data_ready <= 1'b1;
			 end	
			 else
				  data_ready <= 1'b0 ;
		end
		else
		   data_ready <= 1'b0 ;

always @(posedge clk)

	  if (data_ready)
	     oDATA <= data_buf; 
					
endmodule

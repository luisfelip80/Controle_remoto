module up_counter(out,enable,clk,reset);
  output [7:0] out;
  input enable, clk, reset;
  reg [7:0] out;
  
  //-------------Code Starts Here-------
  always @(posedge clk)begin
	if (reset) begin
		out <= 8'b0 ;
	end 
	else if (enable) begin
		out <= out + 1;
	end
  end
endmodule

module orgBits(ordem,b,out,clk);
	output out[7:0];
	input ordem[7:0],b,clk;
	always@(posedge clk)begin
		case(ordem)
			0:begin
				assign out[7] <=b; 	
			end
			1:begin
				assign out[6] <= b;
			end
			2:begin
				assign out[5] <= b;
			end
			3:begin
				assign out[4] <= b;
			end
			4:begin
				assign out[3] <= b;
			end
			5:begin
				assign out[2] <= b;
			end
			6:begin
				assign out[1] <= b;
			end
			7:begin
				assign out[0] <= b;
			end
		endcase
	end
endmodule 

module controle_Decoder (comando,compadador,clk,entrada);
	output [7:0] comando;
	input clk,entrada;
	reg comparador[7:0],comando [7:0],cont [7:0],etapa [7:0], enable,reset,b,bitSgnal[7:0];
	assign etapa <= 0;
	assign reset <=0;
	assign bitSgnal <= 0;
	assign enable <= 0;
	assign cont <= 8'b0;
	wire tempo[7:0];
	wire copia[7:0];
	always@(posedge clk)begin
		up_counter(.out(tempo),.enable(enable),.clk(clk),.reset(reset));
		if(entrada==0 && etapa==0)begin
			assign etapa <= 1;
		end
		if(entrada==1 && etapa == 1)begin
			assign etapa <=2;
		end
		if(entrada==0 && etapa == 2 )begin
			assign etapa <= 3;
			if(cont == 16)begin
				assign cont <= 8'b0;
				assign etapa <= 4;
			end
		end
		if(entrada == 1 && etapa == 3)begin
			assign etapa <=2;
			assign cont <= cont + 1;
		end
		if(entrada ==1 && etapa == 4)begin
			assign enable<= 1;
			assign etapa <= 5;
			assign reset <=0;
			assign cont <= cont + 1;
		end 
		else if(entrada == 0 && etapa == 5)begin
			assign enable <=0;
			assign reset <=1;
			if(cont == 8) begin
				assign cont <= 8'b0;
				assign etapa <=6;
				assign bitSgnal <= 8'b0;
				assign comando <= copia;
				assign reset <= 0;
			end
			else begin 
				assign etapa <=4;
			end
			if(tempo > 18)begin // bit = 1 
				assign tempo <= 8'b0;
				assign b<= 1;
				orgBits(.ordem(bitSgnal),.b(b),.out(copia),.clk(clk));
				assign bitSgnal <= bitSgnal + 1;
				if(bitSgnal==8)begin
					assign bitSgnal <= 0;
				end
			end 
			else if (tempo <= 18)begin// bit = 0
				assign b<= 0;
				assign tempo <= 8'b0;
				orgBits(.ordem(bitSgnal),.b(b),.out(copia),.clk(clk));
				assign bitSgnal <= bitSgnal + 1;
				if(bitSgnal==8)begin
					assign bitSgnal <= 0;
				end
			end
		end
		
		if(entrada ==1 && etapa == 6)begin
			assign enable<= 1;
			assign etapa <= 7;
			assign reset <=0;
			assign cont <= cont + 1;
		end 
		else if(entrada == 0 && etapa == 7)begin
			assign enable <=0;
			assign reset <=1;
			if(cont == 8) begin
				assign cont <= 8'b0;
				assign etapa <=8;
				assign bitSgnal <= 8'b0;
				assign compadador <= copia;
				assign reset <= 0;
			end
			else begin 
				assign etapa <=6;
			end
			if(tempo > 18)begin // bit = 1 
				assign tempo <= 8'b0;
				assign b<= 1;
				orgBits(.ordem(bitSgnal),.b(b),.out(copia),.clk(clk));
				assign bitSgnal <= bitSgnal + 1;
				if(bitSgnal==8)begin
					assign bitSgnal <= 0;
				end
			end 
			else if (tempo <= 18)begin// bit = 0
				assign tempo <= 8'b0;
				assign b<= 0;
				orgBits(.ordem(bitSgnal),.b(b),.out(copia),.clk(clk));
				assign bitSgnal <= bitSgnal + 1;
				if(bitSgnal==8)begin
					assign bitSgnal <= 0;
				end
			end
		end
		if(etapa==8) begin
			assign cont <= 8'b0;
			assign etapa <=0;
			assign bitSgnal <= 8'b0;
			assign reset <= 0;
			assign tempo <= 8'b0;
		end
	end
endmodule
	
	
